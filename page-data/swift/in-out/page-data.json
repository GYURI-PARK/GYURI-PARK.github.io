{"componentChunkName":"component---src-templates-blog-template-js","path":"/swift/in-out/","result":{"data":{"cur":{"id":"72df477d-91d5-59b8-bbf2-c307d9bc4f21","html":"<h2 id=\"-인-아웃-매개변수-in-out-parameter\" style=\"position:relative;\"><a href=\"#-%EC%9D%B8-%EC%95%84%EC%9B%83-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-in-out-parameter\" aria-label=\" 인 아웃 매개변수 in out parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 인-아웃 매개변수 (In-Out Parameter)</h2>\n<blockquote>\n<p>In-Out 파라미터란 ? ! </br></p>\n</blockquote>\n<p>Swift에서 <code class=\"language-text\">inout</code>은 함수의 매개변수 선언 앞에 사용되는 키워드로, 해당 매개변수가 <strong>함수에 전달된 변수에 대한 참조</strong>를 나타냅니다. </br></p>\n<p>이렇게 선언된 <code class=\"language-text\">inout</code> 매개변수는 <strong>함수 내에서 변수의 값을 변경</strong>할 수 있고, 변경된 값은 함수를 호출한 곳으로 다시 전달됩니다. </br></p>\n<p>이를 통해 함수 내부에서 변수의 값을 수정하고 그 결과를 <strong>함수 외부에서 사용</strong>할 수 있습니다. </br>\n</br></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">swapValues</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> a<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span> b<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token function\">swapValues</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"x: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">x</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">, y: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">y</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// 출력: x: 5, y: 3</span></code></pre></div>\n</br>\n<ul>\n<li>swapValues함수는 inout 매개변수인 a와 b를 사용해 변수 x와 y의 값을 서로 바꿉니다.</li>\n<li>함수를 호출할 때 <code class=\"language-text\">&amp;</code>를 사용해 변수의 참조를 전달해야 합니다.</li>\n</ul>\n</br>\n</br>\n<h2 id=\"-why-\" style=\"position:relative;\"><a href=\"#-why-\" aria-label=\" why  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 Why ?</h2>\n<blockquote>\n<p>Swift에서 In-Out 매개변수는 왜 필요한가요 ? ! </br></p>\n</blockquote>\n<p>일반적으로 함수의 파라미터는 함수 내에서 지역 변수로 취급되며, 함수 내에서 변경된 값은 함수 외부에 영향을 미치지 않습니다. </br></p>\n<p>그러나 in-out 파라미터를 사용하면 <code class=\"language-text\">함수 내에서 해당 변수의 값을 직접 변경</code>할 수 있으며, 변경된 값이 <code class=\"language-text\">함수를 호출한 곳으로 다시 전달</code>됩니다. </br></br></p>\n<h2 id=\"-when-\" style=\"position:relative;\"><a href=\"#-when-\" aria-label=\" when  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 When ?</h2>\n<blockquote>\n<p>In-Out파라미터는 언제 유용하게 사용할 수 있을까 ? ! </br></p>\n</blockquote>\n<ol>\n<li>변수의 값을 함수 내에서 변경해야 하지만, 변경된 값을 함수 외부로 전달해야 하는 경우</li>\n</ol>\n<p>함수 내에서 변수의 값을 변경하여 계산 또는 수정하는 경우가 있을 수 있습니다. </br>\n그러나 해당 <code class=\"language-text\">변경된 값을 함수 외부에서도 사용해야 할 때</code>, in-out 파라미터를 사용하여 변수의 값을 변경하고 변경된 값을 함수 호출자에게 반환할 수 있습니다. </br>\n</br></p>\n<ol start=\"2\">\n<li>여러 개의 반환 값을 함수 외부로 전달해야 하는 경우</li>\n</ol>\n<p>일반적으로 함수는 하나의 값을 반환할 수 있습니다. </br>\n그러나 in-out 파라미터를 사용하면 <code class=\"language-text\">함수 외부로 여러 개의 값을 반환</code>할 수 있습니다. </br>\n함수 내에서 여러 개의 변수를 in-out 파라미터로 전달하여 그 값을 변경하고, 함수 호출자는 변경된 값을 가져올 수 있습니다.\n</br>\n</br></p>\n<ol start=\"3\">\n<li>함수 내부의 변수에 대한 참조 전달</li>\n</ol>\n<p>in-out 파라미터를 사용하면 함수 내부에서 <code class=\"language-text\">변수의 참조를 전달</code>할 수 있습니다.</br>\n이는 큰 데이터 구조를 복사하지 않고 함수 내부에서 직접 수정할 수 있는 장점을 제공합니다. </br>\n이는 성능 향상과 메모리 사용량 감소에 도움이 될 수 있습니다. </br>\n</br></p>\n<h2 id=\"-주의-사항\" style=\"position:relative;\"><a href=\"#-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\" 주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 주의 사항</h2>\n<ul>\n<li>inout 매개변수는 변수에 대한 참조를 전달하므로, 상수나 리터럴 값을 전달할 수 없습니다. <code class=\"language-text\">변수</code>만 전달할 수 있습니다.</li>\n<li>inout 매개변수는 원래의 변수와 동일한 타입을 가져야 합니다.</li>\n<li>함수를 호출할 때 <code class=\"language-text\">&amp;</code>를 사용하여 변수의 참조를 전달해야 합니다.</li>\n<li>inout 매개변수는 함수 내에서 변경되어야 하며, <code class=\"language-text\">초기값을 가질 수 없습니다.</code></li>\n</ul>\n</br>\n</br>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-%EC%9D%B8-%EC%95%84%EC%9B%83-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-in-out-parameter\">💡 인-아웃 매개변수 (In-Out Parameter)</a></li>\n<li><a href=\"#-why-\">👀 Why ?</a></li>\n<li><a href=\"#-when-\">👀 When ?</a></li>\n<li><a href=\"#-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\">💡 주의 사항</a></li>\n</ul>\n</div>","excerpt":"💡 인-아웃 매개변수 (In-Out Parameter) In-Out 파라미터란 ? !  Swift에서 은 함수의 매개변수 선언 앞에 사용되는 키워드로, 해당 매개변수가 함수에 전달된 변수에 대한 참조를 나타냅니다.  이렇게 선언된  매개변수는 함수 내에서 변수의 값을 변경할 수 있고, 변경된 값은 함수를 호출한 곳으로 다시 전달됩니다.  이를 통해 함수 내부에서 변수의 값을 수정하고 그 결과를 함수 외부에서 사용할 수 있습니다. \n swapValues함수는 inout 매개변수인 a와 b를 사용해 변수 x와 y의 값을 서로 바꿉니다. 함수를 호출할 때 를 사용해 변수의 참조를 전달해야 합니다. 👀 Why ? Swift에서 In-Out 매개변수는 왜 필요한가요 ? !  일반적으로 함수의 파라미터는 함수 내에서 지역 변수로 취급되며, 함수 내에서 변경된 값은 함수 외부에 영향을 미치지 않습니다.  그러나 in-out 파라미터를 사용하면 할 수 있으며, 변경된 값이 됩니다.  👀 When…","frontmatter":{"date":"May 26, 2023","title":"In-Out 파라미터","categories":"Swift","author":"박규리","emoji":"🍙"},"fields":{"slug":"/swift/in-out/"}},"next":{"id":"93e15045-c33f-528e-b9e1-236cfbebc1f0","html":"<h2 id=\"-property-wrapper란\" style=\"position:relative;\"><a href=\"#-property-wrapper%EB%9E%80\" aria-label=\" property wrapper란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👀 Property Wrapper란?</h2>\n<blockquote>\n<p>@ObservedObject와 @EnvironmentObject 모두 @State와 @Binding과 마찬가지로 property wrapper 입니다 ! </br></p>\n</blockquote>\n<ul>\n<li>Property wrapper란 속성 감싸기를 통해 코드를 더욱 간결하고 읽기 쉽게 만드는 데 사용되는 기능입니다.</li>\n<li>이를 통해 코드를 더욱 직관적이고 명확하게 작성할 수 있습니다.</li>\n</ul>\n</br>\n</br>\n<h2 id=\"-observedobject\" style=\"position:relative;\"><a href=\"#-observedobject\" aria-label=\" observedobject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 @ObservedObject</h2>\n<p>SwiftUI View가 관찰해야 하는 <code class=\"language-text\">외부 객체</code>가 있을 때 사용됩니다. </br>\n@ObservedObject는 <code class=\"language-text\">ObservableObject 프로토콜</code>을 채택하여 SwiftUI View와 상호작용할 수 있도록 만들어집니다. </br>\n</br></p>\n<h3 id=\"-docs\" style=\"position:relative;\"><a href=\"#-docs\" aria-label=\" docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 Docs</h3>\n<img width=\"70%\" height=\"70%\" alt=\"image\" src=\"https://github.com/GYURI-PARK/UIKit_Archive/assets/93391058/9a157eb0-35a2-496e-9387-e6824c1b9a5a\">\n</br>\n<p>@ObservedObject 래퍼는 <code class=\"language-text\">SwiftUI 뷰와 ObservableObject 객체 간의 연결을 설정</code>하는 데 사용됩니다. </br>\nObservableObject 객체가 변경될 때마다 뷰는 알림을 받고 업데이트된 값을 사용하여 다시 렌더링됩니다. </br>\n이러한 래퍼는 뷰와 관찰 대상 객체 간에 바인딩을 생성하여, 관찰 대상 객체가 변경되면 해당 <code class=\"language-text\">변경 사항이 자동으로 뷰에 업데이트</code>되도록 합니다.\n</br></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DataModel</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Some Name\"</span></span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> isEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> model <span class=\"token operator\">=</span> <span class=\"token class-name\">DataModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">MySubView</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">:</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MySubView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@ObservedObject</span> <span class=\"token keyword\">var</span> model<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DataModel</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Toggle</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Enabled\"</span></span><span class=\"token punctuation\">,</span> isOn<span class=\"token punctuation\">:</span> $model<span class=\"token punctuation\">.</span>isEnabled<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<p>@ObservedObject 속성을 사용하여 SwiftUI 뷰의 매개변수로 <code class=\"language-text\">ObservableObject 인스턴스를 전달</code>하고, 해당 객체의 <code class=\"language-text\">@Published 프로퍼티가 변경될 때 뷰를 업데이트</code>할 수 있습니다. </br>\n이는 주로 StateObject를 서브뷰로 전달할 때 사용됩니다. </br></p>\n<p>위의 예제는 데이터 모델을 <code class=\"language-text\">ObservableObject</code>로 정의하고, 해당 모델을 뷰에서 <code class=\"language-text\">StateObject로 인스턴스화</code>한 다음, 서브뷰에 전달하기 위해 @ObservedObject 속성을 사용하는 방법을 보여줍니다. </br></p>\n<p>따라서 사용자가 <code class=\"language-text\">name</code>이나 <code class=\"language-text\">isEnabled</code>값을 업데이트 하면, DataModel객체의 <code class=\"language-text\">@Published 프로퍼티</code>가 변경되고, 이를 의존하고 있는 <code class=\"language-text\">MySubView</code>가 자동으로 업데이트 됩니다. </br></p>\n<p>또한 <code class=\"language-text\">서브뷰에서 모델 프로퍼티를 업데이트</code>할 수 있으며, 예를 들어 위의 예제에서처럼 토글을 사용하여 다른 뷰 계층 구조에 있는 관찰자들에게 전파할 수 있습니다. </br>\n</br></p>\n<h3 id=\"️-정리\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A0%95%EB%A6%AC\" aria-label=\"️ 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 정리</h3>\n<ul>\n<li>@ObservedObject 속성을 사용할 때, 해당 객체를 <code class=\"language-text\">뷰의 입력으로 사용</code>하는 경우에만 사용해야 합니다.</li>\n</ul>\n<blockquote>\n<p>즉, 객체를 뷰 내부에서만 사용하는 경우에는 다른 속성(<code class=\"language-text\">@StateObject</code>, <code class=\"language-text\">@EnvironmentObject</code>)들을 사용하는 것이 좋습니다. </br></p>\n</blockquote>\n<ul>\n<li>\n<p>ObservableObject 객체를 구독하고, 객체의 <code class=\"language-text\">@Published 프로퍼티가 변경될 때</code> 뷰를 업데이트할 수 있습니다.</p>\n</li>\n<li>\n<p>하지만 @ObservedObject 속성에 <code class=\"language-text\">기본값이나 초기값을 지정하는 것</code>은 권장되지 않습니다. ❌</p>\n</li>\n</ul>\n<blockquote>\n<p>만약 객체를 초기화하거나, 뷰 내부에서 사용하는 경우에는 <code class=\"language-text\">@StateObject</code>나 <code class=\"language-text\">@EnvironmentObject</code> 등의 속성을 사용하는 것이 좋습니다.</br></p>\n</blockquote>\n<ul>\n<li>\n<p>따라서 @ObservedObject 속성은 주로 <code class=\"language-text\">뷰 간에 데이터를 전달</code>하거나, <code class=\"language-text\">외부에서 주입된 데이터를 사용하는 경우</code>에 사용됩니다.</p>\n</li>\n<li>\n<p>이를 통해 SwiftUI에서 <code class=\"language-text\">반응적</code>이고 <code class=\"language-text\">효율적</code>으로 데이터를 관리할 수 있습니다.</p>\n</li>\n</ul>\n</br>\n</br>\n<h2 id=\"-observableobject-protocol\" style=\"position:relative;\"><a href=\"#-observableobject-protocol\" aria-label=\" observableobject protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 ObservableObject Protocol</h2>\n<p>SwiftUI에서 ObservableObject 프로토콜은 관찰 가능한(observable) 객체를 정의하기 위해 사용됩니다. </br>\nObservableObject를 준수하는 객체는 <code class=\"language-text\">@Published</code> 속성을 사용하여 해당 속성의 값이 변경될 때마다 알리는 방식으로 다른 객체들에게 변경 사항을 알릴 수 있습니다. </br></p>\n<p>ObservableObject를 준수하는 객체는 SwiftUI 앱의 상태를 나타내는 <code class=\"language-text\">모델(model) 객체</code>로 사용될 수 있습니다. </br>\n이 모델 객체는 뷰(view)와 분리되어, 뷰에 표시될 <code class=\"language-text\">데이터를 관리하고 업데이트</code>하는 역할을 합니다. </br>\n모델 객체를 별도로 관리함으로써, SwiftUI는 해당 객체가 변경될 때마다 뷰를 자동으로 업데이트할 수 있게 됩니다. </br></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서, Counter 클래스는 ObservableObject 프로토콜을 준수하고, count 속성은 @Published 속성으로 정의되어 있습니다. </br>\n이렇게 구현된 Counter 클래스의 객체는 변경될 때마다 관찰 가능한 객체로 동작하며, 뷰와 함께 사용할 수 있습니다. </br></p>\n</br>\n<h2 id=\"-environmentobject\" style=\"position:relative;\"><a href=\"#-environmentobject\" aria-label=\" environmentobject permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 @EnvironmentObject</h2>\n<p>SwiftUI View의 <code class=\"language-text\">상위 뷰에서 생성 및 관리되는 객체를 가져와 View에서 사용</code>할 수 있도록 합니다. </br>\n@EnvironmentObject를 사용하면 View에서 이전에 생성된 객체를 다시 만들 필요가 없으므로, 코드를 더욱 간결하게 작성할 수 있습니다. <br>\n</br></p>\n<h3 id=\"-docs-1\" style=\"position:relative;\"><a href=\"#-docs-1\" aria-label=\" docs 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📝 Docs</h3>\n<img width=\"70%\" height=\"70%\" alt=\"image\" src=\"https://github.com/GYURI-PARK/UIKit_Archive/assets/93391058/57726dad-e35c-49e3-8297-3cf764cbe600\">\n<br>\n<p>@EnvironmentObject는 주로 SwiftUI 앱의 상태를 나타내는 <code class=\"language-text\">전역적인 객체를 관리</code>하기 위해 사용됩니다. </br></p>\n<p>@EnvironmentObject를 사용하면, 하위 뷰에서 해당 객체를 직접 전달하지 않고도 상위 뷰에서 전달한 객체에 접근할 수 있습니다. </br></p>\n<p>@EnvironmentObject를 사용하기 위해서는, 다음과 같이 세 가지 단계를 거쳐야 합니다.</p>\n<ol>\n<li>전역적인 객체를 정의하고 ObservableObject 프로토콜을 준수하도록 구현합니다</li>\n<li>해당 객체를 앱의 root view에서 <code class=\"language-text\">environmentObject modifier</code>를 사용하여 등록합니다.</li>\n<li>하위 뷰에서 <code class=\"language-text\">@EnvironmentObject</code> 속성을 사용해 등록된 객체에 접근합니다.</li>\n</ol>\n</br>\n</br>\n<h3 id=\"️-정리-1\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%A0%95%EB%A6%AC-1\" aria-label=\"️ 정리 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⭐️ 정리</h3>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserData</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ObservableObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@Published</span> <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"John Doe\"</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@EnvironmentObject</span> <span class=\"token keyword\">var</span> userData<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UserData</span>\n    \n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello, </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">userData<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">!\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyApp</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> userData <span class=\"token operator\">=</span> <span class=\"token class-name\">UserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">Scene</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">WindowGroup</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ContentView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">environmentObject</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<p>위의 예시에서, UserData 클래스는 ObservableObject 프로토콜을 준수하도록 구현되어 있습니다. </br>\nContentView 뷰에서는 @EnvironmentObject 속성을 사용하여 userData 객체에 접근합니다. </br>\n마지막으로, MyApp 앱에서는 ContentView를 environmentObject modifier를 사용하여 userData 객체를 등록합니다. </br></p>\n<ul>\n<li>@EnvironmentObject를 사용하는 뷰에서는 해당 객체의 속성이 변경될 때마다 뷰를 업데이트하므로, 이를 통해 상위 뷰에서 관리되는 전역적인 객체를 사용할 수 있습니다.</li>\n</ul>\n</br>\n</br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-property-wrapper%EB%9E%80\">👀 Property Wrapper란?</a></p>\n</li>\n<li>\n<p><a href=\"#-observedobject\">💡 @ObservedObject</a></p>\n<ul>\n<li><a href=\"#-docs\">📝 Docs</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%A0%95%EB%A6%AC\">⭐️ 정리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-observableobject-protocol\">💡 ObservableObject Protocol</a></p>\n</li>\n<li>\n<p><a href=\"#-environmentobject\">💡 @EnvironmentObject</a></p>\n<ul>\n<li><a href=\"#-docs-1\">📝 Docs</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%A0%95%EB%A6%AC-1\">⭐️ 정리</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 14, 2023","title":"Property wrapper - @ObservedOject, @EnvironmentObject","categories":"SwiftUI","author":"박규리","emoji":"🌃"},"fields":{"slug":"/swift/wrappingproperty/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/GYURI-PARK","comments":{"utterances":{"repo":"GYURI-PARK/blog-comment"}}}}},"pageContext":{"slug":"/swift/in-out/","nextSlug":"/swift/wrappingproperty/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}