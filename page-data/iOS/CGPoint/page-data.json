{"componentChunkName":"component---src-templates-blog-template-js","path":"/iOS/CGPoint/","result":{"data":{"cur":{"id":"b5bd058c-bf4b-5d42-a680-47a6e4d499ef","html":"<h2 id=\"-why\" style=\"position:relative;\"><a href=\"#-why\" aria-label=\" why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧠 Why?</h2>\n<blockquote>\n<p>iOS에서 View를 그리기 위해선 다음과 같은 것들이 필요하다.</p>\n</blockquote>\n</br>\n<ol>\n<li>View의 시작 위치를 알기위한 <strong>x,y 좌표</strong> </br></li>\n</ol>\n<p>(이 좌표는 iOS 뷰 기준점인 **왼쪽 꼭대기 (0,0)**으로부터 시작) </br>\n2. 시작지점부터 어느 크기만큼 그릴 건지에 대한 <strong>width, height</strong> </br></p>\n</br>\n</br>\n<h2 id=\"cgpoint\" style=\"position:relative;\"><a href=\"#cgpoint\" aria-label=\"cgpoint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CGPoint</h2>\n<blockquote>\n<p>A structure that contains a point in a two-dimensional coordinate system</p>\n</blockquote>\n</br>\n<ul>\n<li>2차원 좌표계의 점을 포함하는 구조체</li>\n</ul>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CGPoint</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<blockquote>\n<p>다음과 같이 CGFloat 타입의 x, y 값을 가지는 구조체이다.\n</br>\n</br>\n✨ 따라서 View의 위치를 나타낼 때 CGPoint를 사용한다.</br>\n그러나 꼭 View의 위치를 나타낼 때만 쓰는  것이 아니라 x, y 를 나타내야 할 때 언제든 사용 가능하다.</p>\n</blockquote>\n</br>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> pos<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGPoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n</br>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// 내가 사용한 예</span>\n<span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token class-name\">GameScene</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">:</span> view<span class=\"token punctuation\">.</span>frame<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n\nscene<span class=\"token punctuation\">.</span>anchorPoint <span class=\"token operator\">=</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 원점을 왼쪽 상단으로 설정</span></code></pre></div>\n</br>\n</br>\n<h2 id=\"cgsize\" style=\"position:relative;\"><a href=\"#cgsize\" aria-label=\"cgsize permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CGSize</h2>\n<blockquote>\n<p>A structure that contains width and height values</p>\n</blockquote>\n</br>\n<ul>\n<li>너비와 높이 값을 포함하는 구조체</li>\n<li>사각형을 의미하는 것이 아님</li>\n</ul>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CGSize</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> width<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGFloat</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<blockquote>\n<p>다음과 같이 CGFloat 타입의 width, height 값을 가지는 구조체이다.\n</br>\n</br>\nView의 사이즈를 나타낼 때 CGSize를 사용할 수 있다.</br></p>\n</blockquote>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGSize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n</br>\n</br>\n<h2 id=\"cgrect\" style=\"position:relative;\"><a href=\"#cgrect\" aria-label=\"cgrect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CGRect</h2>\n<blockquote>\n<p>A structure that contains the location and dimensions of a rectangle</p>\n</blockquote>\n</br>\n<ul>\n<li><strong>사각형</strong>의 위치와 크기를 포함하는 구조체</li>\n<li>실제 UIView를 구현할 땐 frame의 파라미터로 CGRect가 사용된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGRect</span><span class=\"token punctuation\">)</span></code></pre></div>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CGRect</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> origin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGPoint</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGSize</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGpoint</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGSize</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n<blockquote>\n<p>위 코드에서 보이듯 CGRect는 <strong>CGPoint 타입의 origin</strong>과 <strong>CGSize 타입의 size</strong>를 포함하고 있다. </br>\n즉, View를 나타낼 때 origin은 <strong>x,y 좌표</strong>를 size는 <strong>width, height</strong>를 나타낸다고 생각하면 된다.</p>\n</blockquote>\n</br>\n</br>\n<p>실제 View의 frame에 접근하는 법\n</br></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> rect<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGRect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGSize</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</br>\n</br>\n<p>간단하게 표현 </br></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> rect<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGRect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n</br>\n</br>\n<p>실제 View 정의 </br></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> rect<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGRect</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> myView<span class=\"token punctuation\">:</span> <span class=\"token class-name\">UIView</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">:</span> rect<span class=\"token punctuation\">)</span>\n\nmyView<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>blue\n<span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">addSubview</span><span class=\"token punctuation\">(</span>myView<span class=\"token punctuation\">)</span></code></pre></div>\n</br>\n</br>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#-why\">🧠 Why?</a></li>\n<li><a href=\"#cgpoint\">CGPoint</a></li>\n<li><a href=\"#cgsize\">CGSize</a></li>\n<li><a href=\"#cgrect\">CGRect</a></li>\n</ul>\n</div>","excerpt":"🧠 Why? iOS에서 View를 그리기 위해선 다음과 같은 것들이 필요하다. View의 시작 위치를 알기위한 x,y 좌표  (이 좌표는 iOS 뷰 기준점인 **왼쪽 꼭대기 (0,0)**으로부터 시작) \n2. 시작지점부터 어느 크기만큼 그릴 건지에 대한 width, height  CGPoint A structure that contains a point in a two-dimensional coordinate system 2차원 좌표계의 점을 포함하는 구조체 다음과 같이 CGFloat 타입의 x, y 값을 가지는 구조체이다.\n\n\n✨ 따라서 View의 위치를 나타낼 때 CGPoint를 사용한다.\n그러나 꼭 View의 위치를 나타낼 때만 쓰는  것이 아니라 x, y 를 나타내야 할 때 언제든 사용 가능하다. CGSize A structure that contains width and height values 너비와 높이 값을 포함하는 구조체 사각형을 의미하는 것이 아님 다음과 같이 C…","frontmatter":{"date":"February 24, 2023","title":"CGPoint, CGSize, CGRect","categories":"iOS","author":"박규리","emoji":"🪡"},"fields":{"slug":"/iOS/CGPoint/"}},"next":{"id":"7770d3ba-e3fc-5069-93e4-d827133ee7cc","html":"<h2 id=\"-why\" style=\"position:relative;\"><a href=\"#-why\" aria-label=\" why permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧠 Why?</h2>\n<blockquote>\n<p>객체 지향 프로그래밍이 왜 필요할까? </br></p>\n</blockquote>\n</br>\n<ul>\n<li>객체 지향 프로그램 이전의 패러다임을 살펴보면 먼저 <strong>순차적(비구조적) 프로그래밍</strong>과 <strong>절차적(구조적)프로그래밍</strong>이 있다.</li>\n</ul>\n</br>\n<h3 id=\"순차적비구조적-프로그래밍\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%B0%A8%EC%A0%81%EB%B9%84%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"순차적비구조적 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순차적(비구조적) 프로그래밍</h3>\n<ul>\n<li>순차적으로 흘러가는 프로그래밍 구조를 의미</li>\n<li>순차를 중점으로 보는 코드</li>\n<li>코드의 <strong>흐름, 순서</strong>에 기반하는 프로그래밍</li>\n</ul>\n</br>\n<blockquote>\n<p>비구조적 프로그래밍에서는 주로 goto문을 활용 </br>\n따라서 규모가 커질수록 goto문이 범람하게 되어 알아보기 어려운 코드가 만들어진다. </br>\n</br>\n-> 코드의 중복을 피하기 위해 코드를 단위화할 방법을 모색</p>\n</blockquote>\n</br>\n</br>\n<h3 id=\"절차적구조적-프로그래밍\" style=\"position:relative;\"><a href=\"#%EC%A0%88%EC%B0%A8%EC%A0%81%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"절차적구조적 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>절차적(구조적) 프로그래밍</h3>\n<ul>\n<li>절차적 프로그래밍에서의 절차란, 우리가 평소에 알고있는 절차가 아닌 <strong>프로시저</strong>를 의미한다.</li>\n</ul>\n<blockquote>\n<p><em>프로시저</em>란? </br>\n반환값(리턴)이 존재하지 않는 함수를 의미 </br></p>\n</blockquote>\n<ul>\n<li>프로시저의 사용으로 goto문이 범람했던 순차적 프로그래밍과 달리 반복 가능성이 있는 부분을 프로시저로 쪼개고 각각의 프로시저안에서 중복되는 부분은 반복문으로 구성</li>\n<li>하지만 이런 프로시저는 <strong>추상적</strong>이라는 문제점을 가지고 있다.</li>\n</ul>\n</br>\n<p>예시 </br></p>\n<blockquote>\n<p>📚 도서관리 프로그램 </br>\n</br>\n도서관리 프로그램을 구현하기 위해선 책이라는 자료형과 이것을 사용할 함수가 필요할 것이다. </br>\n구조적 프로그래밍에선 책 자료형과 이것을 사용하는 함수가 물리적으로 같은 곳에 기록될 순 있지만(모듈) 논리적으로는(개념) 함께 할 수 없는 구조이다.  </br>\n따라서 이를 묶기 위한 새로운 패러다임이 필요</p>\n</blockquote>\n</br>\n</br>\n<p>⭐️ 이처럼 특정한 개념의 함수와 자료형을 한번에 묶기 위한 패러다임이 바로 <strong>객체지향 프로그래밍</strong>이다.</p>\n</br>\n</br>\n<h2 id=\"객체-지향-프로그래밍이란\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"객체 지향 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 지향 프로그래밍이란?</h2>\n<ul>\n<li>프로그래밍에서 필요한 데이터를 추상화시켜 <strong>상태와 행위를 가진 객체</strong>로 만들고, 객체들간의 상호작용을 통해 로직을 구성하는 프로그래밍 방법</li>\n<li>객체 내부에 <strong>자료형(필드)과 함수(메서드)가 함께 존재</strong></li>\n</ul>\n</br>\n<h3 id=\"-객체란\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4%EB%9E%80\" aria-label=\" 객체란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📦 객체란?</h3>\n<blockquote>\n<p>값을 저장할 <strong>변수</strong>와 작업을 수행할 <strong>메소드</strong>를 서로 연관된 것들끼리 묶어서 만든 것 </br>\n레고를 구성하는 레고 조각이라고 생각하면 이해하기 쉽다 !</p>\n</blockquote>\n</br>\n<h2 id=\"객체-지향-프로그래밍의-특징\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"객체 지향 프로그래밍의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 지향 프로그래밍의 특징</h2>\n<h3 id=\"1-추상화-abstraction\" style=\"position:relative;\"><a href=\"#1-%EC%B6%94%EC%83%81%ED%99%94-abstraction\" aria-label=\"1 추상화 abstraction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 추상화 (Abstraction)</h3>\n<ul>\n<li>객체에서 공통된 속성과 행위 추출</li>\n<li>공통의 속성과 행위를 찾아서 타입을 정의하는 과정</li>\n<li>불필요한 정보는 숨기고 중요한 정보만 표현 -> 프로그램을 간단하게 만듦</li>\n</ul>\n</br>\n<blockquote>\n<p>예시 </br>\n아우디, BMW, 벤츠는 모두 ‘자동차’라는 공통점이 있다. </br>\n이 때, ‘자동차’라는 추상화 집합을 만들어 자동차들이 가진 공통적인 특징들을 만들어 활용</p>\n</blockquote>\n</br>\n</br>\n<h3 id=\"2-캡슐화-encapsulation\" style=\"position:relative;\"><a href=\"#2-%EC%BA%A1%EC%8A%90%ED%99%94-encapsulation\" aria-label=\"2 캡슐화 encapsulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 캡슐화 (Encapsulation)</h3>\n<ul>\n<li>변수와 함수를 하나로 묶는 것</li>\n<li>낮은 결합도를 유지할 수 있도록 설계하는 것</li>\n</ul>\n</br>\n<blockquote>\n<p>낮은 결합도란? </br></p>\n<blockquote>\n<p>한 곳에서 변화가 일어나도 다른 곳에 미치는 영향을 최소화 시키는 것을 의미 </br></p>\n</blockquote>\n<p>정보은닉의 활용 </br></p>\n<blockquote>\n<p>외부에서 접근할 필요가 없는 것들은 private으로 접근하지 못하도록 제한</p>\n</blockquote>\n</blockquote>\n</br>\n</br>\n<h3 id=\"3-상속-inheritance\" style=\"position:relative;\"><a href=\"#3-%EC%83%81%EC%86%8D-inheritance\" aria-label=\"3 상속 inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 상속 (Inheritance)</h3>\n<ul>\n<li>클래스의 속성과 행위를 하위 클래스에 물려주거나 하위 클래스가 상위 클래스의 속성과 행위를 물려받는 것</li>\n<li>새로운 클래스가 기존의 클래스의 데이터와 연산을 이용할 수 있게 하는 기능</li>\n<li>__일반화 관계 (Generalization)__라고도 하며, 여러 개체들이 지닌 공통된 특성을 부각시켜 하나의 개념이나 법칙으로 성립하는 과정</li>\n</ul>\n</br>\n<blockquote>\n<p>상속 재사용의 단점 </br></p>\n<ol>\n<li>상위 클래스 (부모 클래스)의 변경이 어려워진다. </br></li>\n<li>불필요한 클래스가 증가할 수 있다. </br></li>\n<li>상속이 잘못 사용될 수 있다.</li>\n</ol>\n</blockquote>\n</br>\n</br>\n<h3 id=\"4-다형성-polymorphism\" style=\"position:relative;\"><a href=\"#4-%EB%8B%A4%ED%98%95%EC%84%B1-polymorphism\" aria-label=\"4 다형성 polymorphism permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 다형성 (Polymorphism)</h3>\n<ul>\n<li>하나의 변수명, 함수명이 상황에 따라 다른 의미로 해석될 수 있는 것</li>\n<li>서로 다른 클래스의 객체가 같은 메세지를 받았을 때 각자의 방식으로 동작하는 능력</li>\n</ul>\n</br>\n<blockquote>\n<p>부모 클래스의 메소드를 자식 클래스가 오버라이딩해서 자신의 역할에 맞게 활용하는 것</p>\n</blockquote>\n</br>\n</br>\n<h2 id=\"객체-지향-설계-원칙-solid\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99-solid\" aria-label=\"객체 지향 설계 원칙 solid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 지향 설계 원칙 (SOLID)</h2>\n<h3 id=\"1-단일-책임-원칙-srp-single-responsibility\" style=\"position:relative;\"><a href=\"#1-%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99-srp-single-responsibility\" aria-label=\"1 단일 책임 원칙 srp single responsibility permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 단일 책임 원칙 (SRP, Single Responsibility)</h3>\n<ul>\n<li>하나의 클래스는 단 한 개의 책임을 가져야 한다. </br></li>\n<li>클래스를 변경하는 이유는 단 한개여야 한다.</li>\n</ul>\n</br>\n</br>\n<h3 id=\"2-개방-폐쇄-원칙-ocp-open-closed\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99-ocp-open-closed\" aria-label=\"2 개방 폐쇄 원칙 ocp open closed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 개방-폐쇄 원칙 (OCP, Open-Closed)</h3>\n<ul>\n<li>확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다. </br></li>\n<li>기능을 변경하거나 확장할 수 있으면서, 그 기능을 사용하는 코드는 수정하지 않는다.</li>\n</ul>\n</br>\n<h3 id=\"3-리스코프-치환-원칙-lsp-liskov-substitution\" style=\"position:relative;\"><a href=\"#3-%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98-%EC%9B%90%EC%B9%99-lsp-liskov-substitution\" aria-label=\"3 리스코프 치환 원칙 lsp liskov substitution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 리스코프 치환 원칙 (LSP, Liskov Substitution)</h3>\n<ul>\n<li>상위 타입의 객체를 하위 타입의 객체로 치환해도, 상위 타입을 사용하는 프로그램은 정상적으로 동작해야 한다. </br></li>\n</ul>\n</br>\n<h3 id=\"4-인터페이스-분리-원칙-isp-interface-segregaiton\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99-isp-interface-segregaiton\" aria-label=\"4 인터페이스 분리 원칙 isp interface segregaiton permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 인터페이스 분리 원칙 (ISP, Interface Segregaiton)</h3>\n<ul>\n<li>인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야 한다.</li>\n<li>각 클라이언트가 사용하지 않는 인터페이스에 변경이 발생하더라도 영향을 받지 않도록 만들어야 한다.</li>\n</ul>\n</br>\n</br>\n<h3 id=\"5-의존-역전-원칙-dip-dependa\" style=\"position:relative;\"><a href=\"#5-%EC%9D%98%EC%A1%B4-%EC%97%AD%EC%A0%84-%EC%9B%90%EC%B9%99-dip-dependa\" aria-label=\"5 의존 역전 원칙 dip dependa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 의존 역전 원칙 (DIP, Dependa)</h3>\n<ul>\n<li>고수준 모듈은 저수준 모듈의 구현에 의존해서는 안된다.</li>\n<li>저수준 모듈이 고수준 모듈에서 정의한 추상 타입에 의존해야 한다.</li>\n<li>저수준 모듈이 변경되어도 고수준 모듈은 변경할 필요가 없다.</li>\n</ul>\n</br>\n</br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-why\">🧠 Why?</a></p>\n<ul>\n<li><a href=\"#%EC%88%9C%EC%B0%A8%EC%A0%81%EB%B9%84%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">순차적(비구조적) 프로그래밍</a></li>\n<li><a href=\"#%EC%A0%88%EC%B0%A8%EC%A0%81%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">절차적(구조적) 프로그래밍</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">객체 지향 프로그래밍이란?</a></p>\n<ul>\n<li><a href=\"#-%EA%B0%9D%EC%B2%B4%EB%9E%80\">📦 객체란?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95\">객체 지향 프로그래밍의 특징</a></p>\n<ul>\n<li><a href=\"#1-%EC%B6%94%EC%83%81%ED%99%94-abstraction\">1. 추상화 (Abstraction)</a></li>\n<li><a href=\"#2-%EC%BA%A1%EC%8A%90%ED%99%94-encapsulation\">2. 캡슐화 (Encapsulation)</a></li>\n<li><a href=\"#3-%EC%83%81%EC%86%8D-inheritance\">3. 상속 (Inheritance)</a></li>\n<li><a href=\"#4-%EB%8B%A4%ED%98%95%EC%84%B1-polymorphism\">4. 다형성 (Polymorphism)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84-%EC%9B%90%EC%B9%99-solid\">객체 지향 설계 원칙 (SOLID)</a></p>\n<ul>\n<li><a href=\"#1-%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99-srp-single-responsibility\">1. 단일 책임 원칙 (SRP, Single Responsibility)</a></li>\n<li><a href=\"#2-%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99-ocp-open-closed\">2. 개방-폐쇄 원칙 (OCP, Open-Closed)</a></li>\n<li><a href=\"#3-%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98-%EC%9B%90%EC%B9%99-lsp-liskov-substitution\">3. 리스코프 치환 원칙 (LSP, Liskov Substitution)</a></li>\n<li><a href=\"#4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99-isp-interface-segregaiton\">4. 인터페이스 분리 원칙 (ISP, Interface Segregaiton)</a></li>\n<li><a href=\"#5-%EC%9D%98%EC%A1%B4-%EC%97%AD%EC%A0%84-%EC%9B%90%EC%B9%99-dip-dependa\">5. 의존 역전 원칙 (DIP, Dependa)</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 21, 2023","title":"객체 지향 프로그래밍 (OOP, Object-Oriented Programming)","categories":"CS","author":"박규리","emoji":"📦"},"fields":{"slug":"/CS/OOP/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://github.com/GYURI-PARK","comments":{"utterances":{"repo":"GYURI-PARK/blog-comment"}}}}},"pageContext":{"slug":"/iOS/CGPoint/","nextSlug":"/CS/OOP/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}