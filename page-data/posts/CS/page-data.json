{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/CS","result":{"pageContext":{"currentCategory":"CS","categories":["All","CS","Swift","회고"],"edges":[{"node":{"id":"7770d3ba-e3fc-5069-93e4-d827133ee7cc","excerpt":"🧠 Why? 객체 지향 프로그래밍이 왜 필요할까?  객체 지향 프로그램 이전의 패러다임을 살펴보면 먼저 순차적(비구조적) 프로그래밍과 절차적(구조적)프로그래밍이 있다. 순차적(비구조적) 프로그래밍 순차적으로 흘러가는 프로그래밍 구조를 의미 순차를 중점으로 보는 코드 코드의 흐름, 순서에 기반하는 프로그래밍 비구조적 프로그래밍에서는 주로 goto문을 활용 \n따라서 규모가 커질수록 goto문이 범람하게 되어 알아보기 어려운 코드가 만들어진다. \n\n코드의 중복을 피하기 위해 코드를 단위화할 방법을 모색 절차적(구조적) 프로그래밍 절차적 프로그래밍에서의 절차란, 우리가 평소에 알고있는 절차가 아닌 프로시저를 의미한다. _프로시저_란? \n반환값(리턴)이 존재하지 않는 함수를 의미  프로시저의 사용으로 goto문이 범람했던 순차적 프로그래밍과 달리 반복 가능성이 있는 부분을 프로시저로 쪼개고 각각의 프로시저안에서 중복되는 부분은 반복문으로 구성 하지만 이런 프로시저는 추상적이라는 문제점을 가…","fields":{"slug":"/CS/OOP/"},"frontmatter":{"categories":"CS","title":"객체지향 프로그래밍 (OOP, Object-Oriented Programming)","date":"February 21, 2023"}},"next":{"fields":{"slug":"/swift/property-method/"}},"previous":null}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}