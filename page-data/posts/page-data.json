{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"2507938a-727f-5893-a0ab-f9ae520c6c74","excerpt":"☠️ 오류 내용 2023-03-12 19:30:15.653050+0900 TetrisGame[8542:367066] [SceneConfiguration] Info.plist contained no UIScene configuration dictionary (looking for configuration named “(no name)“) Info.plist 파일에 UIScene 구성 사전이 없다는 내용이다.   디렉토리를 살펴봤더니 다음과 같이 Info.plist 파일이 모두 사라져 있었다. 검색해본 결과  Xcode13부터 신규 프로젝트 생성 시 info.plist파일이 프로젝트 내부로 들어가 디렉토리 상에서 찾을 수 없다고 하였다. 🔎 해결방법  다음과 같이 PROJECT -> TARGETS -> Info 로 접근   Key에 **‘App Transport Security’**를 추가하고  하위에 **‘Allow Arbitrary Loads’**를 추가한 다음,  Value를 **…","fields":{"slug":"/iOS/info/"},"frontmatter":{"categories":"iOS","title":"(Xcode) 사라진 info.plist 파일을 찾아서","date":"March 12, 2023"}},"next":{"fields":{"slug":"/CS/CacheMemory/"}},"previous":null},{"node":{"id":"f8a159d6-34e0-55c0-aaf6-711908cf4631","excerpt":"💡 캐시 메모리 (Cashe Memory) 속도가 빠른 장치와 느린 장치에서 속도 차이에 따른 병목 현상을 줄이기 위한 메모리 CPU가 주기억장치에서 저장된 데이터를 읽어올 때, 자주 사용하는 데이터를 캐시 메모리에 저장한 뒤, 다음에 이용할 때 주기억장치가 아닌 캐시 메모리에서 먼저 가져옴으로써 속도를 향상 시킨다.  메인 메모리와 CPU 사이에 위치하며, CPU의 속도에 버금갈 만큼 메모리 계층에서 가장 속도가 빠르지만, 용량이 적고 비싸다는 단점도 있다.  하나의 CPU에는 이러한 캐시 메모리가 2~3개 사용된다.(L1, L2, L3) \n이는 속도와 크기에 따라 분류한 것으로, 일반적으로 L1 캐시부터 먼저 사용된다.  듀얼 코어 프로세서의 캐시 메모리 각 코어마다 독립된 L1 캐시 메모리를 가지고, 두 코어가 공유하는 L2 캐시 메모리가 내장된다.   L1 캐시는 보통 8~64KB 정도의 용량으로 CPU가 가장 빠르게 접근하게 되며, 여기서 데이터를 찾지 못하면, L2 캐시…","fields":{"slug":"/CS/CacheMemory/"},"frontmatter":{"categories":"CS","title":"캐시 메모리 (Cashe Memory)","date":"March 05, 2023"}},"next":{"fields":{"slug":"/iOS/CGPoint/"}},"previous":{"fields":{"slug":"/iOS/info/"}}},{"node":{"id":"b5bd058c-bf4b-5d42-a680-47a6e4d499ef","excerpt":"🧠 Why? iOS에서 View를 그리기 위해선 다음과 같은 것들이 필요하다. View의 시작 위치를 알기위한 x,y 좌표  (이 좌표는 iOS 뷰 기준점인 **왼쪽 꼭대기 (0,0)**으로부터 시작)  시작지점부터 어느 크기만큼 그릴 건지에 대한 width, height  CGPoint A structure that contains a point in a two-dimensional coordinate system 2차원 좌표계의 점을 포함하는 구조체 다음과 같이 CGFloat 타입의 x, y 값을 가지는 구조체이다.\n\n\n✨ 따라서 View의 위치를 나타낼 때 CGPoint를 사용한다.\n그러나 꼭 View의 위치를 나타낼 때만 쓰는  것이 아니라 x, y 를 나타내야 할 때 언제든 사용 가능하다. CGSize A structure that contains width and height values 너비와 높이 값을 포함하는 구조체 사각형을 의미하는 것이 아님 다음과 같이 CGFl…","fields":{"slug":"/iOS/CGPoint/"},"frontmatter":{"categories":"iOS","title":"CGPoint, CGSize, CGRect","date":"February 24, 2023"}},"next":{"fields":{"slug":"/CS/OOP/"}},"previous":{"fields":{"slug":"/CS/CacheMemory/"}}},{"node":{"id":"7770d3ba-e3fc-5069-93e4-d827133ee7cc","excerpt":"🧠 Why? 객체 지향 프로그래밍이 왜 필요할까?  객체 지향 프로그램 이전의 패러다임을 살펴보면 먼저 순차적(비구조적) 프로그래밍과 절차적(구조적)프로그래밍이 있다. 순차적(비구조적) 프로그래밍 순차적으로 흘러가는 프로그래밍 구조를 의미 순차를 중점으로 보는 코드 코드의 흐름, 순서에 기반하는 프로그래밍 비구조적 프로그래밍에서는 주로 goto문을 활용 \n따라서 규모가 커질수록 goto문이 범람하게 되어 알아보기 어려운 코드가 만들어진다. \n\n-> 코드의 중복을 피하기 위해 코드를 단위화할 방법을 모색 절차적(구조적) 프로그래밍 절차적 프로그래밍에서의 절차란, 우리가 평소에 알고있는 절차가 아닌 프로시저를 의미한다. 프로시저란? \n반환값(리턴)이 존재하지 않는 함수를 의미  프로시저의 사용으로 goto문이 범람했던 순차적 프로그래밍과 달리 반복 가능성이 있는 부분을 프로시저로 쪼개고 각각의 프로시저안에서 중복되는 부분은 반복문으로 구성 하지만 이런 프로시저는 추상적이라는 문제점을 …","fields":{"slug":"/CS/OOP/"},"frontmatter":{"categories":"CS","title":"객체 지향 프로그래밍 (OOP, Object-Oriented Programming)","date":"February 21, 2023"}},"next":{"fields":{"slug":"/swift/property-method/"}},"previous":{"fields":{"slug":"/iOS/CGPoint/"}}},{"node":{"id":"8dc87f29-d003-59af-81f2-4d747b654515","excerpt":"💡 프로퍼티 (Property) ✨ 프로퍼티는 클래스, 구조체, 열거형과 관련한 값 \n✨ 프로퍼티의 종류에는 *저장 프로퍼티(Stored Property)*와 *계산된 프로퍼티(Computed Property)*가 있다.  1. 저장 프로퍼티 (Stored Property) 단순히 값을 저장하고 있는 프로퍼티 \nlet을 사용해 상수 또는 var를 사용해 변수로 선언해 사용 가능 \n클래스와 구조체(열거형 X) 에서만 사용기능 상수 구조체 인스턴스의 저장 프로퍼티 구조체를 상수(let)로 선언하면 구조체 인스턴스의 프로퍼티 변경 불가능 클래스 인스턴스는 let으로 선언하더라도 프로퍼티 변경 가능 지연 저장 프로퍼티 값이 처음으로 사용되기 전에는 계산되지 않는 프로퍼티 lazy 키워드 사용 요소가 끝나기 전에 적절한 값을 알지 못하는 경우에 유용 실제 사용되기 전에는 실행되지 않으므로 인스턴스의 초기화 시점에 복잡한 계산 회피 가능 📝 \n지연 프로퍼티는 반드시 변수(var)로 선언 \n상…","fields":{"slug":"/swift/property-method/"},"frontmatter":{"categories":"Swift","title":"프로퍼티(Property)와 메서드(Method)","date":"February 20, 2023"}},"next":{"fields":{"slug":"/swift/optional/"}},"previous":{"fields":{"slug":"/CS/OOP/"}}},{"node":{"id":"e23e92f8-88f7-5eed-a260-736d99921230","excerpt":"💡 옵셔널 (Optional) 값이 있을 수도 있고, 없을 수도 있는 것! 🧠 Why? nil의 가능성을 명시적으로 표현 nil의 가능성을 문서화 하지 않아도 코드만으로 충분히 표현이 가능하므로 문서 / 주석 작성 시간을 절약 가능 전달 받은 값이 옵셔널이 아닐 경우 nil체크를 하지 않더라도 안심하고 사용할 수 있으므로 효율적인 코딩과 예외 상황을 최소화하는 안전한 코딩이 가능 enum + general ❗️ 암시적 추출 옵셔널 (Implicitly Unwrapped Optional) 기존 변수처럼 사용 가능 nil 할당 가능 ❓ 옵셔널 (Optional) nil 할당 가능 기존 변수처럼 사용불가 ❌ 💡 옵셔널 추출 (Optional Unwrapping) 옵셔널 바인딩 (Optional Binding) nil 체크 + 안전한 값 추출 if - let 여러 변수들을 한번에 바인딩 가능 강제 추출 (Force Unwrapping) 옵셔널의 값을 강제로 추출 강제추출 시 값이 없으면 런…","fields":{"slug":"/swift/optional/"},"frontmatter":{"categories":"Swift","title":"옵셔널(Optional)과 옵셔널 체이닝(Optional Chaining)","date":"February 17, 2023"}},"next":{"fields":{"slug":"/swift/practice-3/"}},"previous":{"fields":{"slug":"/swift/property-method/"}}},{"node":{"id":"5f1c6aa8-70f9-598d-b568-169b225c8927","excerpt":"💡 조건문 if-else if condition { \n     statements \n}  else if condition { \n     statements \n}  else { \n     statements \n} condition(조건) 소괄호 생략 가능 ❗️ Swift 조건은 항상 Bool 타입이 들어와야한다. ❗️ switch switch value { \ncase pattern: \n   code \ndefault: \n   code \n} 범위 연산자를 활용하면 유용 💭 범위 연산자 닫힌 범위 연산자(Closed Range Operator) a…b\na 이상 b 이하 반 닫힌 범위 연산자 (Half-Open Range Operator) a..<b\na 이상 b 미만 단방향 범위 (One-Side Ranges) …a , a… , ..<a\n시작과 끝 중 하나만 정해주는 연산자 정수 외의 대부분의 타입을 기본 타입으로 사용 가능 switch 조건문을 명확하게 명시하지 않으면 반드시 default …","fields":{"slug":"/swift/practice-3/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (3)","date":"February 11, 2023"}},"next":{"fields":{"slug":"/회고/Apple Developer Academy/"}},"previous":{"fields":{"slug":"/swift/optional/"}}},{"node":{"id":"c8c098cd-b58c-5cfb-9d33-eec0f585086c","excerpt":"","fields":{"slug":"/회고/Apple Developer Academy/"},"frontmatter":{"categories":"회고","title":"Apple Developer Academy @ POSTECH 합격 후기","date":"January 18, 2023"}},"next":{"fields":{"slug":"/swift/practice-2/"}},"previous":{"fields":{"slug":"/swift/practice-3/"}}},{"node":{"id":"8e2004ba-1343-5bb3-ae7d-98c60e5ae1e2","excerpt":"💡 컬렉션 타입 컬렉션 타입 : 여러 값들을 묶어서 하나의 변수로 표현 1. Array Array : 순서가 있는 list 컬렉션 빈 Array 생성 🎯 Int Array 생성 🎯 Double Array 생성 🎯 String Array 생성 🎯 Character Array 생성 ⭐️ let을 사용해 Array 선언 시 Array 원소 변경 불가능 immutableArray.append(4) 또는 immuntableArray.removeAll() 과 같은 명령어 사용 불가능 append Int 타입으로 Array를 생성했기 때문에 Int 타입의 숫자들만 추가할 수 있다. contains Array안에 해당 숫자가 있는지 판별 있으면 true 반환 \n없으면 false 반환 remove remove(at: 인덱스) Array안에 해당 위치 값 삭제 후 값 반환 removeLast() 마지막 값 삭제 후 값 반환 removeAll() 모두 삭제 count 몇개의 원소가 있는지 확인 2. D…","fields":{"slug":"/swift/practice-2/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (2)","date":"January 12, 2023"}},"next":{"fields":{"slug":"/swift/practice-1/"}},"previous":{"fields":{"slug":"/회고/Apple Developer Academy/"}}},{"node":{"id":"97de57da-c6d1-57ef-81f7-22a2556e721c","excerpt":"💡 명명법 Swift 는 대소문자를 구분! 1. Lower Camel Case function, method, variable, constant 2. Upper Camel Case type(class, struct, enum, extension, …) 💡 콘솔로그 1. print 단순 문자열 출력\n 2. dump 인스턴스의 자세한 설명 (description 프로퍼티) 까지 출력 💡 문자열 보간법 (String interpolation) 프로그램 실행 중 문자열 내에 변수 또는 상수의 실질적인 값을 표현하기 위해 사용 () -> 문자열로 자동 치환 💡 상수와 변수 띄워쓰기 중요! 값의 type이 명확하다면 type 생략 가능 1. 상수 선언 상수 선언 키워드 : let \nlet 이름: 타입 = 값 2. 변수 선언 변수 선언 키워드 : var \nvar 이름: 타입 = 값 💡 데이터 타입 Swift는 다른 데이터 타입 간의 변경이 매우 까다롭기 때문에 반드시 명확한 데이터 타입을 설정…","fields":{"slug":"/swift/practice-1/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (1)","date":"December 24, 2022"}},"next":null,"previous":{"fields":{"slug":"/swift/practice-2/"}}}],"categories":["All","iOS","CS","Swift","회고"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}