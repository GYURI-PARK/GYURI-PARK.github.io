{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Swift","result":{"pageContext":{"currentCategory":"Swift","categories":["All","SwiftUI","Swift","etc.","회고","iOS","CS"],"edges":[{"node":{"id":"93e15045-c33f-528e-b9e1-236cfbebc1f0","excerpt":"👀 Property Wrapper란? @ObservedObject와 @EnvironmentObject 모두 @State와 @Binding과 마찬가지로 property wrapper 입니다 !  Property wrapper란 속성 감싸기를 통해 코드를 더욱 간결하고 읽기 쉽게 만드는 데 사용되는 기능입니다. 이를 통해 코드를 더욱 직관적이고 명확하게 작성할 수 있습니다. 💡 @ObservedObject SwiftUI View가 관찰해야 하는 가 있을 때 사용됩니다. \n@ObservedObject는 을 채택하여 SwiftUI View와 상호작용할 수 있도록 만들어집니다. \n 📝 Docs @ObservedObject 래퍼는 하는 데 사용됩니다. \nObservableObject 객체가 변경될 때마다 뷰는 알림을 받고 업데이트된 값을 사용하여 다시 렌더링됩니다. \n이러한 래퍼는 뷰와 관찰 대상 객체 간에 바인딩을 생성하여, 관찰 대상 객체가 변경되면 해당 되도록 합니다.\n @Observe…","fields":{"slug":"/swift/wrappingproperty/"},"frontmatter":{"categories":"SwiftUI","title":"Property wrapper - @ObservedOject, @EnvironmentObject","date":"May 14, 2023"}},"next":{"fields":{"slug":"/swift/enum/"}},"previous":null},{"node":{"id":"69419485-1221-5db8-845c-28688c4d53ea","excerpt":"💡 Enum 개념 연관된 항목들을 묶어서 표현할 수 있는 타입 \n이미 정해놓은 입력 값만 선택해서 사용하고 싶을 떄 유리 \n-> 정의해 준 항목 외에는 추가 / 수정 불가능  즉, 열거형은 다음과 같은 경우 유용  제한된 선택지를 주고 싶을 떄 정해진 값 외에는 입력받고 싶지 않을 때 예상된 입력 값이 한정되어 있을 떄 💡 열거형을 사용하는 이유 깔끔하고 간결한 코드 다음과 같이 열거형을 사용해 코드를 짤 경우 각 대륙 안에 어떤 국가가 있는지 한눈에 알아볼 수 있다.  코드 작성이 편리 위 두개의 코드는 모두 말레이시아 수도 쿠알라룸푸르를 선언하고 있다. \n두 가지의 코드로 수도(KualaLumpur)를 출력 하려고 할 떄, 열거형으로 선언할 경우에는 Capital 입력 시, 자동완성을 통해 어려운 철자를 입력하지 않아도 된다. 코드 실수를 줄일 수 있다. 다음과 같이 모두 같은 실패를 나타내지만, result가 아닌 다른 이름을 사용하면 쓸데없는 코드들이 많아지고 오류가 잦아진…","fields":{"slug":"/swift/enum/"},"frontmatter":{"categories":"Swift","title":"열거형 (Enum)","date":"April 04, 2023"}},"next":{"fields":{"slug":"/swift/navigation/"}},"previous":{"fields":{"slug":"/swift/wrappingproperty/"}}},{"node":{"id":"a1947bcc-3e1d-5d62-b838-c39091fb679e","excerpt":"💡 NavigationStack A view that displays a root view and enables you to present additional views over the root view. \n\n다른 뷰로 넘어가는 방식 (화면전환의 방식)을 스택처럼 적용한 것 선언  항상 제거되지 않은 가장 최근에 추가된 View를 표시 RootView는 제거할 수 없다. NavigationStack을 사용하기 위해선 NavigationLink와 .navigationDestination 수정자가 필요 \n NavigationLink = 제어 뷰 (클릭 시 내가 원하는 View를 나오게 하는 역할) navigationDestination(for:destination:) = Destination View를 NavigationLink에서 제시된 Data 타입과 연결해주는 Method 💡 NavigationLink A view that controls a navigation presnetat…","fields":{"slug":"/swift/navigation/"},"frontmatter":{"categories":"Swift SwiftUI","title":"(SwiftUI) 화면전환을 위한 NavigationLink, NavigationStack","date":"April 03, 2023"}},"next":{"fields":{"slug":"/swift/frame/"}},"previous":{"fields":{"slug":"/swift/enum/"}}},{"node":{"id":"376bf5b6-a84f-5a98-a054-b8074881c477","excerpt":"💡 SwiftUI에서의 View SwiftUI는 AutoLayout과 달리, \n본인이 속한 부모뷰와 본인의 콘텐츠에 동시에 영향을 받아 자동으로 Layout이 결정 \nUIKit에서 프레임을 설정하는 것과 달리, \nSwiftUI의 수식어는 뷰를 직접 변경하는 것이 아닌, 원래의 뷰를 수식하는 새로운 뷰를 반환  SwiftUI에서 뷰는 View 프로토콜을 따르는 구조체로 선언되고, 그 View 프로토콜을 따르기 위해서는 body 프로퍼티를 가지고 있어야 하며, 그 안에 View가 선언되어야 한다.  사진과 같이 미리보기를 할 수 있는 이유는 BloadUpload뷰에 대한 PreviewProvider가 설정되어 있기 때문 ⭐️ 하나의 body 프로퍼티는 단 1개의 뷰를 반환하도록 구성  다음 코드에서와 같이 두개의 Text를 입력하더라도 위 사진에서처럼 하나의 뷰에 Text 두개가 나타나는 것이 아닌 Preview가 두개 생기는 것을 볼 수 있다. \n\n⭐️ 따라서 새로운 뷰를 추가하기 위해…","fields":{"slug":"/swift/frame/"},"frontmatter":{"categories":"Swift SwiftUI","title":"(SwiftUI) View 사이즈 조절하기 by Frame, Padding, Spacer","date":"April 01, 2023"}},"next":{"fields":{"slug":"/etc./storytelling/"}},"previous":{"fields":{"slug":"/swift/navigation/"}}},{"node":{"id":"25c937b5-ed68-5666-865a-da6917c7cfa0","excerpt":"💡 assert 함수 특정v조건을 체크하고 조건이 성립되지 않으면 메시지를 출력할 수 있게 해주는 함수 애플리케이션이 동작 도중에 생성하는 다양한 결과값을 동적으로 확인하고 안전하게 처리할 수 있도록 확인하고 빠르게 처리 가능 assert(::file:line:) 함수를 사용 디버깅 모드에서만 동작 배포하는 애플리케이션에서는 제외됨 주로 디버깅 중 조건의 검증을 위해 사용 💡 guard 구문 문법 \nguard 조건 else {조건이 false일 때 실행될 구문} guard 구문의 핵심은 Early EXIT (빠른 종료) if 조건문과 비교해본다면, if문은 ‘(조건)이면 (code)해라’의 실행구문이지만, guard구문의 경우 ‘(조건)이 아니면 끝내라’ 디버깅 모드뿐만 아니라 어떤 조건에서도 동작 가능 guard의 else 블럭 내부에는 _특정 코드블럭을 종료하는 지시어(return, break, continue, throw 등)_가 꼭 있어야 한다. 단순 조건 판단 후 빠르게 …","fields":{"slug":"/swift/assert-guard/"},"frontmatter":{"categories":"Swift","title":"assert와 guard","date":"March 20, 2023"}},"next":{"fields":{"slug":"/회고/MC1/"}},"previous":{"fields":{"slug":"/etc./storytelling/"}}},{"node":{"id":"070f727f-3f26-5102-ac81-23357c4dad0a","excerpt":"💡 클로저 (Closure) 클로저는 사용자의 코드 안에서 전달되어 사용할 수 있는 로직을 가진 중괄호{}로 구분된 코드의 블럭을 의미 전역함수(global function)와 중첩함수(nested function)기 모두 클로저에 포함 보통 클로저는 Unnamed Closure를 의미하는 것이지만, Named Closure(함수) 또한 Closure에 포함 Named Closure (함수)  다음 코드와 같이 우리가 일반적으로 func()을 사용해 정의하는 이름이 있는 함수를 의미 \n단지, 이를 클로저로 부르는 것이 아니라, 그냥 함수로 명칭  Unnamed Closure (익명함수)  보통 Closure의 의미는 다음과 같이 이름을 붙이지 않고 사용하는 함수(익명함수)를 말함  따라서 클로저는 익명이긴 하지만 함수이기에 1급 객체 함수의 특성을 모두 가짐 1급 객체 함수의 특성 \n 변수나 상수에 저장 및 할당 가능  파라미터(객체의 인자)로 전달 가능  함수(객체)에서 retu…","fields":{"slug":"/swift/closures/"},"frontmatter":{"categories":"Swift","title":"클로저 (Closure)","date":"March 06, 2023"}},"next":{"fields":{"slug":"/CS/CacheMemory/"}},"previous":{"fields":{"slug":"/iOS/info/"}}},{"node":{"id":"8dc87f29-d003-59af-81f2-4d747b654515","excerpt":"💡 프로퍼티 (Property) ✨ 프로퍼티는 클래스, 구조체, 열거형과 관련한 값 \n✨ 프로퍼티의 종류에는 *저장 프로퍼티(Stored Property)*와 *계산된 프로퍼티(Computed Property)*가 있다.  1. 저장 프로퍼티 (Stored Property) 단순히 값을 저장하고 있는 프로퍼티 \nlet을 사용해 상수 또는 var를 사용해 변수로 선언해 사용 가능 \n클래스와 구조체(열거형 X) 에서만 사용기능 상수 구조체 인스턴스의 저장 프로퍼티 구조체를 상수(let)로 선언하면 구조체 인스턴스의 프로퍼티 변경 불가능 클래스 인스턴스는 let으로 선언하더라도 프로퍼티 변경 가능 지연 저장 프로퍼티 값이 처음으로 사용되기 전에는 계산되지 않는 프로퍼티 lazy 키워드 사용 요소가 끝나기 전에 적절한 값을 알지 못하는 경우에 유용 실제 사용되기 전에는 실행되지 않으므로 인스턴스의 초기화 시점에 복잡한 계산 회피 가능 📝 \n지연 프로퍼티는 반드시 변수(var)로 선언 \n상…","fields":{"slug":"/swift/property-method/"},"frontmatter":{"categories":"Swift","title":"프로퍼티(Property)와 메서드(Method)","date":"February 20, 2023"}},"next":{"fields":{"slug":"/swift/struct-class/"}},"previous":{"fields":{"slug":"/iOS/CGPoint/"}}},{"node":{"id":"40d8bfcb-1655-5287-b45a-aff63d7a54cf","excerpt":"✨ 구조체와 클래스는 OOP(Object-Oriented Programming)를 위한 필수 요소로 프로그램의 코드를 추상화하기 위해 사용  ✨ Swift에서는 구조체와 클래스를 위한 별도의 인터페이스와 파일을 만들 필요가 없다. 💡 구조체 (Struct) 정의 인스턴스의 값(프로퍼티)을 저장하거나 기능(메소드)을 제공하고 이를 캡슐화할 수 있는 Swift가 제공하는 타입 Swift에서는 대부분의 타입이 구조체로 이루어져 있다. 대문자 CamelCase 사용 구조체는 값 타입 (Value Type) 함수에서 상수나 변수에 전달될 때 값이 복사되어 전달 구조체에서는 값이 할당되는 순간 복사되기 때문에 picture와 hd는 전혀 다른 인스턴스 struct 이름 { \n      구현부  } 프로퍼티 및 매서드 🔎 프로퍼티와 매서드에 대한 자세한 설명은 여기 참고 구조체 사용 1. 가변 인스턴스 2. 불변 인스턴스 3. 타입 프로퍼티 및 매서드 구조체 타입 자체에서 사용할 수 있는 프로…","fields":{"slug":"/swift/struct-class/"},"frontmatter":{"categories":"Swift","title":"구조체(Struct)와 클래스(Class)","date":"February 17, 2023"}},"next":{"fields":{"slug":"/swift/optional/"}},"previous":{"fields":{"slug":"/swift/property-method/"}}},{"node":{"id":"e23e92f8-88f7-5eed-a260-736d99921230","excerpt":"💡 옵셔널 (Optional) 값이 있을 수도 있고, 없을 수도 있는 것! 🧠 Why? nil의 가능성을 명시적으로 표현 nil의 가능성을 문서화 하지 않아도 코드만으로 충분히 표현이 가능하므로 문서 / 주석 작성 시간을 절약 가능 전달 받은 값이 옵셔널이 아닐 경우 nil체크를 하지 않더라도 안심하고 사용할 수 있으므로 효율적인 코딩과 예외 상황을 최소화하는 안전한 코딩이 가능 enum + general ❗️ 암시적 추출 옵셔널 (Implicitly Unwrapped Optional) 기존 변수처럼 사용 가능 nil 할당 가능 ❓ 옵셔널 (Optional) nil 할당 가능 기존 변수처럼 사용불가 ❌ 💡 옵셔널 추출 (Optional Unwrapping) 옵셔널 바인딩 (Optional Binding) nil 체크 + 안전한 값 추출 if - let 여러 변수들을 한번에 바인딩 가능 강제 추출 (Force Unwrapping) 옵셔널의 값을 강제로 추출 강제추출 시 값이 없으면 런…","fields":{"slug":"/swift/optional/"},"frontmatter":{"categories":"Swift","title":"옵셔널(Optional)과 옵셔널 체이닝(Optional Chaining)","date":"February 17, 2023"}},"next":{"fields":{"slug":"/swift/practice-3/"}},"previous":{"fields":{"slug":"/swift/struct-class/"}}},{"node":{"id":"5f1c6aa8-70f9-598d-b568-169b225c8927","excerpt":"💡 조건문 if-else if condition { \n     statements \n}  else if condition { \n     statements \n}  else { \n     statements \n} condition(조건) 소괄호 생략 가능 ❗️ Swift 조건은 항상 Bool 타입이 들어와야한다. ❗️ switch switch value { \ncase pattern: \n   code \ndefault: \n   code \n} 범위 연산자를 활용하면 유용 💭 범위 연산자 닫힌 범위 연산자(Closed Range Operator) a…b\na 이상 b 이하 반 닫힌 범위 연산자 (Half-Open Range Operator) a..<b\na 이상 b 미만 단방향 범위 (One-Side Ranges) …a , a… , ..<a\n시작과 끝 중 하나만 정해주는 연산자 정수 외의 대부분의 타입을 기본 타입으로 사용 가능 switch 조건문을 명확하게 명시하지 않으면 반드시 default …","fields":{"slug":"/swift/practice-3/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (3)","date":"February 11, 2023"}},"next":{"fields":{"slug":"/회고/Apple Developer Academy/"}},"previous":{"fields":{"slug":"/swift/optional/"}}},{"node":{"id":"8e2004ba-1343-5bb3-ae7d-98c60e5ae1e2","excerpt":"💡 컬렉션 타입 컬렉션 타입 : 여러 값들을 묶어서 하나의 변수로 표현 1. Array Array : 순서가 있는 list 컬렉션 빈 Array 생성 🎯 Int Array 생성 🎯 Double Array 생성 🎯 String Array 생성 🎯 Character Array 생성 ⭐️ let을 사용해 Array 선언 시 Array 원소 변경 불가능 immutableArray.append(4) 또는 immuntableArray.removeAll() 과 같은 명령어 사용 불가능 append Int 타입으로 Array를 생성했기 때문에 Int 타입의 숫자들만 추가할 수 있다. contains Array안에 해당 숫자가 있는지 판별 있으면 true 반환 \n없으면 false 반환 remove remove(at: 인덱스) Array안에 해당 위치 값 삭제 후 값 반환 removeLast() 마지막 값 삭제 후 값 반환 removeAll() 모두 삭제 count 몇개의 원소가 있는지 확인 2. D…","fields":{"slug":"/swift/practice-2/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (2)","date":"January 12, 2023"}},"next":{"fields":{"slug":"/swift/practice-1/"}},"previous":{"fields":{"slug":"/회고/Apple Developer Academy/"}}},{"node":{"id":"97de57da-c6d1-57ef-81f7-22a2556e721c","excerpt":"💡 명명법 Swift 는 대소문자를 구분! 1. Lower Camel Case function, method, variable, constant 2. Upper Camel Case type(class, struct, enum, extension, …) 💡 콘솔로그 1. print 단순 문자열 출력\n 2. dump 인스턴스의 자세한 설명 (description 프로퍼티) 까지 출력 💡 문자열 보간법 (String interpolation) 프로그램 실행 중 문자열 내에 변수 또는 상수의 실질적인 값을 표현하기 위해 사용 () -> 문자열로 자동 치환 💡 상수와 변수 띄워쓰기 중요! 값의 type이 명확하다면 type 생략 가능 1. 상수 선언 상수 선언 키워드 : let \nlet 이름: 타입 = 값 2. 변수 선언 변수 선언 키워드 : var \nvar 이름: 타입 = 값 💡 데이터 타입 Swift는 다른 데이터 타입 간의 변경이 매우 까다롭기 때문에 반드시 명확한 데이터 타입을 설정…","fields":{"slug":"/swift/practice-1/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (1)","date":"December 24, 2022"}},"next":null,"previous":{"fields":{"slug":"/swift/practice-2/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}