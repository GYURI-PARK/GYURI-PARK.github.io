{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Swift","result":{"pageContext":{"currentCategory":"Swift","categories":["All","Swift","회고"],"edges":[{"node":{"id":"8dc87f29-d003-59af-81f2-4d747b654515","excerpt":"💡 프로퍼티 (Property) ✨ 프로퍼티는 클래스, 구조체, 열거형과 관련한 값 \n✨ 프로퍼티의 종류에는 *저장 프로퍼티(Stored Property)*와 *계산된 프로퍼티(Computed Property)*가 있다.  1. 저장 프로퍼티 (Stored Property) 단순히 값을 저장하고 있는 프로퍼티 \nlet을 사용해 상수 또는 var를 사용해 변수로 선언해 사용 가능 \n클래스와 구조체(열거형 X) 에서만 사용기능 상수 구조체 인스턴스의 저장 프로퍼티 구조체를 상수(let)로 선언하면 구조체 인스턴스의 프로퍼티 변경 불가능 클래스 인스턴스는 let으로 선언하더라도 프로퍼티 변경 가능 지연 저장 프로퍼티 (Lazy Stored Property) 값이 처음으로 사용되기 전에는 계산되지 않는 프로퍼티 lazy 키워드 사용 요소가 끝나기 전에 적절한 값을 알지 못하는 경우에 유용 실제 사용되기 전에는 실행되지 않으므로 인스턴스의 초기화 시점에 복잡한 계산 회피 가능 📝 \n지연 프…","fields":{"slug":"/swift/property-method/"},"frontmatter":{"categories":"Swift","title":"프로퍼티(Property)와 메서드(Method)","date":"February 20, 2023"}},"next":{"fields":{"slug":"/swift/struct-class/"}},"previous":null},{"node":{"id":"40d8bfcb-1655-5287-b45a-aff63d7a54cf","excerpt":"✨ 구조체와 클래스는 OOP(Object-Oriented Programming)를 위한 필수 요소로 프로그램의 코드를 추상화하기 위해 사용  ✨ Swift에서는 구조체와 클래스를 위한 별도의 인터페이스와 파일을 만들 필요가 없다. 💡 구조체 (Struct) 정의 인스턴스의 값(프로퍼티)을 저장하거나 기능(메소드)을 제공하고 이를 캡슐화할 수 있는 Swift가 제공하는 타입 Swift에서는 대부분의 타입이 구조체로 이루어져 있다. 대문자 CamelCase 사용 구조체는 값 타입 (Value Type) 함수에서 상수나 변수에 전달될 때 값이 복사되어 전달 구조체에서는 값이 할당되는 순간 복사되기 때문에 picture와 hd는 전혀 다른 인스턴스 struct 이름 { \n      구현부  } 프로퍼티 및 매서드 🔎 프로퍼티와 매서드에 대한 자세한 설명은 여기 참고 구조체 사용 1. 가변 인스턴스 2. 불변 인스턴스 3. 타입 프로퍼티 및 매서드 구조체 타입 자체에서 사용할 수 있는 프로…","fields":{"slug":"/swift/struct-class/"},"frontmatter":{"categories":"Swift","title":"구조체(Struct)와 클래스(Class)","date":"February 17, 2023"}},"next":{"fields":{"slug":"/swift/optional/"}},"previous":{"fields":{"slug":"/swift/property-method/"}}},{"node":{"id":"e23e92f8-88f7-5eed-a260-736d99921230","excerpt":"💡 옵셔널 (Optional) 값이 있을 수도 있고, 없을 수도 있는 것! 🧠 Why? nil의 가능성을 명시적으로 표현 nil의 가능성을 문서화 하지 않아도 코드만으로 충분히 표현이 가능하므로 문서 / 주석 작성 시간을 절약 가능 전달 받은 값이 옵셔널이 아닐 경우 nil체크를 하지 않더라도 안심하고 사용할 수 있으므로 효율적인 코딩과 예외 상황을 최소화하는 안전한 코딩이 가능 enum + general ❗️ 암시적 추출 옵셔널 (Implicitly Unwrapped Optional) 기존 변수처럼 사용 가능 nil 할당 가능 ❓ 옵셔널 (Optional) nil 할당 가능 기존 변수처럼 사용불가 ❌ 💡 옵셔널 추출 (Optional Unwrapping) 옵셔널 바인딩 (Optional Binding) nil 체크 + 안전한 값 추출 if - let 여러 변수들을 한번에 바인딩 가능 강제 추출 (Force Unwrapping) 옵셔널의 값을 강제로 추출 강제추출 시 값이 없으면 런…","fields":{"slug":"/swift/optional/"},"frontmatter":{"categories":"Swift","title":"옵셔널(Optional)과 옵셔널 체이닝(Optional Chaining)","date":"February 17, 2023"}},"next":{"fields":{"slug":"/swift/practice-3/"}},"previous":{"fields":{"slug":"/swift/struct-class/"}}},{"node":{"id":"5f1c6aa8-70f9-598d-b568-169b225c8927","excerpt":"💡 조건문 if-else if condition { \n     statements \n}  else if condition { \n     statements \n}  else { \n     statements \n} condition(조건) 소괄호 생략 가능 ❗️ Swift 조건은 항상 Bool 타입이 들어와야한다. ❗️ switch switch value { \ncase pattern: \n   code \ndefault: \n   code \n} 범위 연산자를 활용하면 유용 💭 범위 연산자 닫힌 범위 연산자(Closed Range Operator) a…b\na 이상 b 이하 반 닫힌 범위 연산자 (Half-Open Range Operator) a..<b\na 이상 b 미만 단방향 범위 (One-Side Ranges) …a , a… , ..<a\n시작과 끝 중 하나만 정해주는 연산자 정수 외의 대부분의 타입을 기본 타입으로 사용 가능 switch 조건문을 명확하게 명시하지 않으면 반드시 default …","fields":{"slug":"/swift/practice-3/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (3)","date":"February 11, 2023"}},"next":{"fields":{"slug":"/회고/Apple Developer Academy/"}},"previous":{"fields":{"slug":"/swift/optional/"}}},{"node":{"id":"8e2004ba-1343-5bb3-ae7d-98c60e5ae1e2","excerpt":"💡 컬렉션 타입 컬렉션 타입 : 여러 값들을 묶어서 하나의 변수로 표현 1. Array Array : 순서가 있는 list 컬렉션 빈 Array 생성 🎯 Int Array 생성 🎯 Double Array 생성 🎯 String Array 생성 🎯 Character Array 생성 ⭐️ let을 사용해 Array 선언 시 Array 원소 변경 불가능 immutableArray.append(4) 또는 immuntableArray.removeAll() 과 같은 명령어 사용 불가능 append Int 타입으로 Array를 생성했기 때문에 Int 타입의 숫자들만 추가할 수 있다. contains Array안에 해당 숫자가 있는지 판별 있으면 true 반환 \n없으면 false 반환 remove remove(at: 인덱스) Array안에 해당 위치 값 삭제 후 값 반환 removeLast() 마지막 값 삭제 후 값 반환 removeAll() 모두 삭제 count 몇개의 원소가 있는지 확인 2. D…","fields":{"slug":"/swift/practice-2/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (2)","date":"January 12, 2023"}},"next":{"fields":{"slug":"/swift/practice-1/"}},"previous":{"fields":{"slug":"/회고/Apple Developer Academy/"}}},{"node":{"id":"97de57da-c6d1-57ef-81f7-22a2556e721c","excerpt":"💡 명명법 Swift 는 대소문자를 구분! 1. Lower Camel Case function, method, variable, constant 2. Upper Camel Case type(class, struct, enum, extension, …) 💡 콘솔로그 1. print 단순 문자열 출력\n 2. dump 인스턴스의 자세한 설명 (description 프로퍼티) 까지 출력 💡 문자열 보간법 (String interpolation) 프로그램 실행 중 문자열 내에 변수 또는 상수의 실질적인 값을 표현하기 위해 사용 () -> 문자열로 자동 치환 💡 상수와 변수 띄워쓰기 중요! 값의 type이 명확하다면 type 생략 가능 1. 상수 선언 상수 선언 키워드 : let \nlet 이름: 타입 = 값 2. 변수 선언 변수 선언 키워드 : var \nvar 이름: 타입 = 값 💡 데이터 타입 Swift는 다른 데이터 타입 간의 변경이 매우 까다롭기 때문에 반드시 명확한 데이터 타입을 설정…","fields":{"slug":"/swift/practice-1/"},"frontmatter":{"categories":"Swift","title":"Swift 기초 다지기 (1)","date":"December 24, 2022"}},"next":null,"previous":{"fields":{"slug":"/swift/practice-2/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}